name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Helmctl ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in ${{ steps.get_version.outputs.version }}

          ### ðŸš€ Features
          - Enterprise-grade Helmfile CLI
          - Multi-cluster support and safety features
          - Comprehensive test suite with coverage

          ### ðŸ“¦ Installation

          **Download the binary for your platform below, or:**

          ```bash
          # Build from source
          cargo install --git https://github.com/akmshasan/helmctl
          ```

          **Quick Start:**
          ```bash
          helmctl config init
          helmctl --help
          ```
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binary
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: helmctl
            asset_name: helmctl-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: helmctl.exe
            asset_name: helmctl-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: helmctl
            asset_name: helmctl-macos-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream
